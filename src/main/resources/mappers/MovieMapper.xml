<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="org.zerock.myapp.mapper.MovieMapper">

    <!-- 전체영화목록 -->
    <select id="findAllMovies" resultType="org.zerock.myapp.domain.MovieVO">
        SELECT
        *
        FROM
        movies
        ORDER BY
        release_date DESC
    </select>

    <!-- 전체영화목록 관리자 전용 -->
    <select id="findAllMoviesmanagerOnly" resultType="org.zerock.myapp.domain.MovieVO">
        SELECT
        *
        FROM
        movies
        ORDER BY
        id ASC
    </select>

    <!-- 제목, 감독명, 배우명으로 검색할 때 -->
    <select id="searchMovies" resultType="org.zerock.myapp.domain.MovieVO">
        SELECT DISTINCT m.*
        FROM movies m
        LEFT JOIN credits c ON m.id = c.movie_id
        WHERE
        <if test="searchCategory == 'title'">
            (LOWER(m.title)  LIKE '%' || LOWER(#{searchInput}) || '%'
            OR LOWER(m.original_title) LIKE '%' || LOWER(#{searchInput}) || '%')
        </if>
        <if test="searchCategory == 'credits'">
            LOWER(c.name) LIKE '%' || LOWER(#{searchInput}) || '%'
        </if>
        ORDER BY
        release_date DESC
    </select>

    <!-- 장르별 검색 -->
    <select id="searchByGenre" resultType="org.zerock.myapp.domain.MovieVO">
        SELECT
        DISTINCT m.*
        FROM
        Movies m
        JOIN
        MovieGenres mg ON m.id = mg.movie_id
        JOIN
        genres g ON mg.genre_id = g.id
        WHERE
        g.name IN
        <foreach item="genre" index="index" collection="genres" open="(" separator="," close=")">
            #{genre}
        </foreach>
    </select>

    <!-- 개봉일자 검색 -->
    <select id="searchByDate" resultType="org.zerock.myapp.domain.MovieVO">
        SELECT m.*
        FROM movies m
        WHERE release_date BETWEEN #{startDate} AND #{endDate}
        ORDER BY release_date DESC
    </select>

    <!--========================================================================================-->

    <!-- 특정 영화 조회 -->
    <select id="findDetailMovie" resultType="org.zerock.myapp.domain.MovieVO">
        SELECT
        *
        FROM
        movies
        WHERE
        id = #{movieId}
    </select>

    <!-- 특정 영화 내 장르 조회 -->
    <select id="genreOfMovies" resultType="org.zerock.myapp.domain.MovieGenreVO">
        SELECT DISTINCT g.*
        FROM genres g
        JOIN MovieGenres mg ON g.id = mg.genre_id
        WHERE mg.movie_id = #{movieId}
    </select>

    <!-- 특정 영화 내 제작참여자 중 배우만 조회 -->
    <select id="castsOfMovies" resultType="org.zerock.myapp.domain.CreditsVO">
        SELECT c.*
        FROM (
        SELECT *, ROW_NUMBER() OVER (PARTITION BY profile_path ORDER BY profile_path) AS rn
        FROM Credits
        WHERE movie_id = #{movieId}
        AND job = 'Actor'
        ) c
        WHERE c.rn = 1
    </select>

    <!-- 특정 영화 내 제작참여자 중 스태프만 조회 -->
    <select id="crewsOfMovies" resultType="org.zerock.myapp.domain.CreditsVO">
        SELECT c.*
        FROM (
        SELECT *, ROW_NUMBER() OVER (PARTITION BY profile_path ORDER BY profile_path) AS rn
        FROM Credits
        WHERE movie_id = #{movieId}
        AND job != 'Actor'
        ) c
        WHERE c.rn = 1
    </select>

    <!-- 특정 영화 내 관람등급 조회 -->
    <select id="certificationsOfMovies" resultType="org.zerock.myapp.domain.CertificationVO">
        SELECT * FROM Certifications WHERE movie_id = #{movieId}
    </select>

    <!-- 특정 영화의 게시글 조회 -->
    <select id="findBoardByMovie" resultType="org.zerock.myapp.domain.authorOfBoardVO">
        SELECT b.*, m.nickname
        FROM Board b
        JOIN member m ON b.member_id = m.id
        WHERE b.movie_id = #{movieId}
        ORDER BY b.created_at DESC
    </select>

    <!-- totalCount 쿼리 -->
    <select id="totalCount" resultType="integer">
        SELECT COUNT(*)
        FROM movies
    </select>

    <!-- 사용자가 해당 영화에 위시리스트를 추가했는지 확인 -->
    <select id="WishlistCheck" resultType="Integer">
        SELECT COUNT(id) FROM wishlist WHERE movie_id = #{movieId} AND member_id = #{memberId}
    </select>

    <!-- 이미 위시리스트를 눌렀다면, 위시리스트 취소 -->
    <delete id="cancelWishlist">
        DELETE FROM wishlist WHERE movie_id = #{movieId} AND member_id = #{memberId}
    </delete>

    <!-- 위시리스트를 누르지 않았다면, 위시리스트 추가 -->
    <insert id="addWishlist">
        INSERT INTO wishlist (movie_id, member_id) VALUES (#{movieId}, #{memberId})
    </insert>

    <!--  디테일 페이지 클릭시 검색기록에 추가  -->
    <insert id="insertSearchHistory">
        MERGE INTO SEARCH_HISTORY AS target
        USING (SELECT #{memberId, jdbcType=INTEGER} AS member_id, #{movieId, jdbcType=INTEGER} AS movie_id FROM dual) AS source
        ON target.member_id = source.member_id AND target.movie_id = source.movie_id
        WHEN MATCHED THEN
        UPDATE SET target.member_id = source.member_id, target.movie_id = source.movie_id, target.search_date = CURRENT_TIMESTAMP
        WHEN NOT MATCHED THEN
        INSERT (member_id, movie_id) VALUES (source.member_id, source.movie_id)
    </insert>

</mapper>